
			 +--------------------------+
			 |		EE 415				|
			 |	PROJECT 2: USER PROGRAMS|
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jiwon Choi <jirus@kaist.ac.kr>
Kahee Lim <limgh55@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Perhaps it isn't a extra credit, we successfully implemented sigaction, sendsig, and sigyield.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
userprog/process.c에 있는 start_process 함수에 file_name이 인자로 전달되면 
strlcpy로 복사본을 만들고 for문을 돌며 strtok_r을 실행시켜 file_name의 token의
개수를 구한다. 이렇게 구한 token의 개수만큼의 메모리를 malloc으로 할당시켜준 후
다시 file_name의 복사본을 strlcpy로 만들어 for문을 돌며 strtok_을 실행시켜 
tokenize하며 각 token을 malloc으로 할당한 메모리에 넣어준다. 

userprog/process.c에 있는 argument_stack 함수에서 argv[], token의 개수, 
stack pointer를 받으면 stack에 쌓아주도록 만들었다. 먼저 token들을 stack에 쌓고 
주소가 4Byte 단위가 되도록 남는 stack 공간을 0으로 채워주고, NULL, argv[]의 
token들의 주소,  argv[]의 주소, token의 갯수, fake return address를 차례로 쌓아주었다.
이때, token과 token의 addess들을 쌓아줄 때에는 for문에서 argv[]의 첫 번째 원소부터 
쌓는 것이 아닌 가장 뒤쪽 원소부터 거꾸로 쌓아준다. (문제에서 말하는 argv는 우리가 
구현한 코드에서는 parse라는 이름을 가진다.)

Stack page의 overflow를 직접 avoid하도록 구현하지는 않았지만 oslab 홈페이지의 
project2 설명에 따르면 pintos가 커널에 넘겨주는 command는 최대 128B라는 것을 
토대로 parse할 때 file_name_use 변수의 메모리 크기를 그에 맞게 설정해주었다.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok()에서는 next token의 위치를 가리키기 위해 static buffer 안에 있는 internal 
static pointer를 사용한다. 따라서 여러 thread가 동시에 돌게 되면 race condition이 
발생할 수 있게 된다.
strtok_r()은 strtok()의 reentrant version으로써, next token의 위치를 저장하기 위한 
extra argument가 있기 때문에 다른 thread에 의해 data가 달라질 가능성이 없어진다.
따라서, thread switching이 발생할 가능성이 있는 pintos에서는 strtok() 대신 strtok_r()을 사용해야 한다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
첫 번째로, Kernel 대신 shell이 argument passing을 하게 되면 invalid한 command가 
작성되었을 때 kernel까지 오지 않고 shell에서 처리가 되기 때문에 kernel에서 하는 것보다는 안전해진다.
두 번째로, shell이 argument passing을 하게 되면 kernel에서 소요되는 시간이 감소하고 
이는 system overhead의 감소로 이어지게 되어 효율적이어진다.


	       SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


1. in pintos/src/userprog/syscall.h, global variable‘struct lock filesys_lock’ 
: use to avoid race condition on file, it can protect filesystem.

2. in pintos/src/threads/thread.h, struct ‘struct signal’ 
: to store the signals that each thread given by sigaction. This become a member of thread structure. 
It contains 2 structure member; int signum – store the signal number, 
void (*sig_handler) (void) = store the signal handler

3. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct thread *parent’ 
: to store the parent of each thread

4. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct list child’ 
: store the child threads of each thread as list

5. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct list_elem child_elem’ 
: used to register as a child of parent thread of each threads.

6. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct semaphore child_lock’ 
: used when waiting child thread at process_wait and process_exit

7. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct semaphore memory_lock’ 
: use to wait until the dying child’s memory being completely cleaned up.

8. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct semaphore exec_lock’ 
: use to make parent thread wait until the child being loaded

9. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct file *fdt[64]’ 
: use to store the file descriptors of each file that are addressed in each threads

10. in pintos/src/threads/thread.h, struct member of struct thread, ‘int next_fd’ 
: use to store where to store the next file descriptor on *fdt[64], that is, indexing number

11. in pintos/src/threads/thread.h, struct member of struct thread, ‘struct signal *save_signal[10]’ 
: use to save the received signals from sigaction, store the ‘struct signal’ that we defined to store 
the informations of each signals(this is explained above)

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
We open file using the function filesys_open(). A specific file is unique within the entire OS, 
but it can be stored different file descriptor number at different processes.


 
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
reading, writing에 대해 system call이 호출되는 경우, file descriptor, buffer 포인터, size를 
parameter로 받는다. fd와 buffer에 대해서 validate_user_vaddr() 함수(is_user_vaddr()함수를 
사용하여 parameter validation을 수행하는 함수)를 사용하여 parameter validation을 수행한다.
validate하지 않은 경우 exit(-1)처리를 진행한다. reading의 경우 fd가 0일 때에는 STDIN에서
input_getc()함수를 사용하여 input을 받아 buffer 포인터가 가리키는 위치에 저장한다. 
fd가 0이 아닌 경우, file_read함수를 사용하여 파일을 읽어 buffer 포인터가 가리키는 위치에 저장한다.
writing의 경우 fd가 1일 때에는 STDOUT에 put_buffer함수를 사용하여 write를 수행한다. 
이외의 경우, file_write함수를 사용하여 buffer의 내용을 file에 write한다.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Full page(4096 bytes)의 경우, least passible number of inspection은 ELF에 대한 segment file의 
크기가 4096 이상일 경우에 대해서 1회이며, greatest possible number of inspection은 각 byte에
대해 모두 inspection을 시행할 경우에 4096회이다. 2 bytes의 경우, least possible number of 
inspection은 마찬가지로 1회이며, greatest possible number of inspection은 2회이다. 
이를 개선하기 위해서는 inspection이 시행된 적이 있는 page에 대해서는 inspection을 시행하지 
않도록 하는 방법이 있을 수 있다.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait과 exit간의 synchronization을 수행하기 위해서 struct 구조체의 member로 ‘struct semaphore child_lock’과
‘struct semaphore memory_lock’을 정의하였다. process_wait 함수에서 wait을 수행한다. 
current thread의 child에 대해서, child의 tid가 wait의 parameter로 받은 tid와 같을 경우, 
해당 child의 child_lock을 sema_down을 사용하여 해당 child가 종료되기까지 기다린다. 
이후 child가 종료되면 해당 child를 현재 thread의 child list에서 제거한 이후, child의 memory_lock을 
sema_up을 하고, 종료된 child의 exit_status를 반환한다. process_exit함수에서 process termination을 수행한다. 
process_wait에서 child의 child_lock에 대해 sema_down이 실행되면, 해당 child가 모든 프로세스를 마치고 
exit할 때까지 process_wait함수가 기다리게 된다. 해당 child가 process를 다 완료하고 exit을 위해 
process_exit 함수가 호출되면, exit 과정을 수행하고, 해당 thread의 child_lock을 sema_up하여 process_wait함수의 
waiting을 종료한다. 이후 process_exit의 memory_lock에 대한 sema_down과 process_wait의 memory_lock에 대한
 sema_up을 통하여 위와 같이 함수의 synchronous를 수행한다.

 
>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

validate_user_vaddr을 사용하여 system call이 실행될 때에 해당 parameter들에 대한 validation check를 
진행하였다. 만일 parameter가 invalid한 경우, exit(-1)을 수행한다. error가 detect될 때에는 temporarily 
allocated resources를 free해야 하는 문제에 대해서는, validation check가 진행된 이후에 대해서만 
resources allocation을 진행하는 방법을 사용함으로써 해당 문제를 해결할 수 있었다. 예로, SYS_EXEC의 경우에 대해, 
validate_user_vaddr(f->esp+4);의 코드를 사용하여 parameter validation을 진행하였고, validation을 통과한 경우에 
대해서만 exec함수를 호출하여 process_execution함수를 실행하도록 하였다.

 
---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

process_execute와 start_process간의 synchronization을 수행하기 위해서 struct 구조체의 member로 
‘struct semaphore exec_lock’을 정의하였다.
process_execute()함수에서, 현재 thread의 exec_lock에 대해 sema_down을 수행하고, start_process()함수에서 
exec_lock에 대해 sema_up을 수행함으로써 두 함수 간의 synchronization을 할 수 있게 하였다.



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

process_wait()에서 child_lock을 sema down시키고 process_exit()에서 C가 종료될 때 child_lock을 
sema up시켜줌으로써 C가 종료될 때까지 P가 wait하도록 구현하였다.
이를 통해 만약 C가 종료되기 전에 P에서 wait(C)가 호출되면, sema_down에서 아직 semaphore의 값은
0이기 때문에 일시 중단되고 C가 종료되며 sema_up을 호출하면 process_wait이 다시 실행되게 된다.
만약 C가 종료된 후에 P에서 wait(C)가 호출되면, sema_down에서 semaphore의 값이 1이기 때문에 
중단되지 않고 계속 실행된다.
만약 C가 종료되기 전에 P가 먼저 종료되어버리면 C의 부모는 없는 상태가 된다. 하지만 C가 이후에 종료되면
thread_exit()과 process_exit()에서 C에 할당된 메모리 리소스가 모두 free되게 된다. 
이 때 free는 부모가 존재하지 않아도 가능하다. 따라서, 이러한 경우에도 할당되었던 모든 리소스를 free시킬 수 있다.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
void validate_user_vaddr(const void *vaddr)를 이용하여 vaddr이 kernel 영역에 있거나
NULL이면 exit(-1)이 호출되도록 해주었다.

>> B10: What advantages or disadvantages can you see to your design for file descriptors?
advantages로는 next_fd가 언제나 다음 빈 공간을 가리키고 있기 때문에 
빈 공간을 찾기 위한 time을 save할 수 있다. 
disadvantages로는 fdt를 palloc으로 동적할당해주지 않고 struct file을 가리키는 pointer로 
이루어진 크기 64인 배열로 정적할당해주었기 때문에 메모리 size에 대한 조절이 동적할당에 비해 힘들다.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
identity mapping을 이용하였다.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

